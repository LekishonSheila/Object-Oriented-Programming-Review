//1. **Ancestral Stories:** In many African cultures, the art of storytelling is passed
//down from generation to generation. Imagine you're creating an application that
//records these oral stories and translates them into different languages. The
//stories vary by length, moral lessons, and the age group they are intended for.
//Think about how you would model `Story`, `StoryTeller`, and `Translator`
//objects, and how inheritance might come into play if there are different types of
//stories or storytellers.
//
fun main() {

    var story1 = AncestralStories("long","courage","children","The Lion king","English")

    var story2 = AncestralStories("short", "hardwork", "teenagers", "Vuna Ulichopanda", "Kiswahili")

    println(story1)
    println(story2)

    println(story1.translateStory("Kiswahili"))
    println(story2.translateStory("Kikuyu"))

    story2.addStoryToDatabase()
    story1.addStoryToDatabase()



    var abunwasi = StoryTeller("long", "bravery", "Young Adults", "Adventures of Kinjikitile", "Mijikenda", "Abunuwasi")

    println(abunwasi)

    abunwasi.tellStory()
}

open class AncestralStories(var length: String, var moralLessons: String, var ageGroup: String, var title: String, var language: String) {

//    override fun toString(): String {
//        return "AncestralStory: Title=$title, Length=$length, Moral Lessons=$moralLessons, Age Group=$ageGroup, Language=$language"
//    }
    fun translateStory(newLanguage: String): String {
        if (language != newLanguage) {
            return newLanguage
        } else {
            return language
        }
    }
    fun addStoryToDatabase() {
        var database = mutableListOf<String>()
        if (!database.contains(title)) {
            database.add(title)

            println("The '$title' story added to the database.")
        }
        else {
            println("This story already exists in storage")
        }
    }
}

class StoryTeller(length: String,moralLessons: String,ageGroup: String,title: String,language: String,val name: String)
    : AncestralStories(length, moralLessons, ageGroup, title, language) {


    fun tellStory() {
        println("This is a story called $title, it teaches $ageGroup about $moralLessons")
    }
}




// 2. **African Cuisine:** You're creating a recipe app specifically for African cuisine.
// The app needs to handle recipes from different African countries, each with its
// unique ingredients, preparation time, cooking method, and nutritional
// information. Consider creating a `Recipe` class, and think about how you might
// create subclasses for different types of recipes (e.g., `MoroccanRecipe`,
// `EthiopianRecipe`, `NigerianRecipe`), each with their own unique properties and
// methods.

fun main() {
   val moroccanRecipe = MoroccanRecipe("Coloured Rice", listOf("rice", "onion", "olive oil", "spices"), 45, "Boiled ", "Nice for vitamins", "Medium")
   println(moroccanRecipe)


   val ethiopianRecipe = EthiopianRecipe("Boiled eggs", listOf("eggs", "water"), 20, "protein", "no speces", true)
   println(ethiopianRecipe)


   val nigerianRecipe = NigerianRecipe("Jollof Rice", listOf("rice", "tomatoes", "onion", "pepper", "spices"), 45, "Popular party dish", "is_spicy", true)
   println(nigerianRecipe)


}
open class Recipe(val name: String, val country: String, val ingredients: List<String>, val preparationTime: Int, val cookingMethods: String, val nutritionalInfo: String) {
   fun timeForPreparation(): String {
       return if (preparationTime >= 3) {
           "This coloured Rice takes a long time to prepare"
       } else {
           "This coloured Rice can be prepared within a reasonable amount of time"
       }
   }


   override fun toString(): String {
       return "Name: $name\ncountry: $country\ningredients: ${ingredients.joinToString(", ")}\npreparation_time: $preparationTime minutes\ncooking_method: $cookingMethods\nnutrition_info: $nutritionalInfo"
   }
}


class MoroccanRecipe(name: String, ingredients: List<String>, preparationTime: Int, cookingMethod: String, nutritionalInfo: String, val spiceLevel: String) : Recipe(name, "Morocco", ingredients, preparationTime, cookingMethod, nutritionalInfo)


class EthiopianRecipe(name: String, ingredients: List<String>, preparationTime: Int, cookingMethod: String, nutritionalInfo: String, val isInjeraIncluded: Boolean) : Recipe(name, "Ethiopia", ingredients, preparationTime, cookingMethod, nutritionalInfo)


class NigerianRecipe(name: String, ingredients: List<String>, preparationTime: Int, cookingMethod: String, nutritionalInfo: String, val isSpicy: Boolean) : Recipe(name, "Nigeria", ingredients, preparationTime, cookingMethod, nutritionalInfo)





// 3. **Wildlife Preservation:** You're a wildlife conservationist working on a
// program to track different species in a national park. Each species has its own
// characteristics and behaviors, such as its diet, typical lifespan, migration
// patterns, etc. Some species might be predators, others prey. You'll need to
// create classes to model `Species`, `Predator`, `Prey`, etc., and think about how
// these classes might relate to each other through inheritance.

open class Species(var diet: String, var typicalLifespan: Int, var migrationPatterns: String) {
    fun typeOfAnimal() {
        when (diet) {
            "herbivorous" -> println("This animal is not a danger to other animals")
            "omnivorous" -> println("This animal feeds on plants but also feeds on some animals")
            else -> println("This animal is very dangerous to other animals and does not eat plants")
        }
    }
}
class Predator(diet: String, typicalLifespan: Int, migrationPatterns: String, var typeOfTeeth: String, var claws: Boolean, var venom: Boolean, var name: String) : Species(diet, typicalLifespan, migrationPatterns) {
    fun venomousKillers() {
        if (venom && typeOfTeeth.contains("fangs")) {
            println("This animal is venomous")
        } else {
            println("This animal is not venomous")
        }
    }
    fun methodOfKilling() {
        when {
            typeOfTeeth.contains("carnassial teeth") -> println("A $name kills by slicing up their prey")
            claws -> println("A $name kills by tearing up their prey")
            venom -> println("A $name kills using venom")
            else -> println("This animal might be harmless")
        }
    }
}
class Prey(diet: String, typicalLifespan: Int, migrationPatterns: String, var defenseMechanisms: List<String>, var name: String) : Species(diet, typicalLifespan, migrationPatterns) {
    fun likelihoodOfSurvival() {
        if (defenseMechanisms.size > 2) {
            println("The likelihood of this animal surviving is quite high")
        } else {
            println("The likelihood of this animal surviving is quite low")
        }
    }
}
fun main() {
    val lion = Predator("carnivorous", 12, "non-migratory", "sharp teeth", true, true, "lion")
    lion.typeOfAnimal()
    lion.venomousKillers()
    lion.methodOfKilling()
    val gazelle = Prey("herbivorous", 10, "migratory", listOf("camouflage", "speed"), "gazelle")
    gazelle.typeOfAnimal()
    gazelle.likelihoodOfSurvival()
}

// 4.**African Music Festival:** You're in charge of organising a Pan-African music
// festival. Many artists from different countries, each with their own musical style
// and instruments are scheduled to perform. You need to write a program to
// manage the festival lineup, schedule, and stage arrangements. Think about how
// you might model the `Artist`, `Performance`, and `Stage` classes, and consider
// how you might use inheritance if there are different types of performances or
// stages.

open class Artist(
    var artistsName: String,
    var country: String,
    var musicStyle: String,
    var instruments: List<String>
) {
    fun addArtists(artistDatabase: MutableList<String>): Boolean {
        if (!artistDatabase.contains(artistsName)) {
            artistDatabase.add(artistsName)
            return true
        }
        return false
    }

    fun removeArtists(artistDatabase: MutableList<String>): String? {
        return artistDatabase.removeFirstOrNull()
    }
}

class Performance(
    artistsName: String,
    country: String,
    musicStyle: String,
    instruments: List<String>,
    var startTime: Long,
    var stopTime: Long
) : Artist(artistsName, country, musicStyle, instruments) {

    fun duration(): String {
        val timeTaken = stopTime - startTime
        return "The duration for the performance was $timeTaken"
    }

    fun schedule(): mutableListOf<String> {
        val eventSchedule = mutableListOf<String>()
        eventSchedule[artistsName] = startTime
        return eventSchedule
    }
}

class Stage(
    artistsName: String,
    country: String,
    musicStyle: String,
    instruments: List<String>,
    var supportingArtists: Boolean
) : Artist(artistsName, country, musicStyle, instruments) {

    fun spaceOccupied(): String {
        if (instruments.contains("drums") && supportingArtists) {
            return "$artistsName will occupy only 50% of the stage"
        }
        if (instruments.contains("drums")) {
            return "$artistsName will occupy only 70% of the stage"
        }
        if (supportingArtists) {
            return "$artistsName will occupy only 80% of the stage"
        }
        return ""
    }
}





// 5.Create a class called Product with attributes for name, price, and quantity.
// Implement a method to calculate the total value of the product (price * quantity).
// Create multiple objects of the Product class and calculate their total values.
class Products (var name:String, var price:Double, var quantity:Int){
    fun getTotalValue(){
        var totalValue = quantity*price
        return totalValue
    }
    fun addProductToDatabase(){
        var database = mutableListOf<String>()
        if (!database.contains(name)){
            database.add(name)
            println("$name has been added to database")
        }
        else{println("$name already exists in database")}
    }
}
fun main(){
    var product1 = Products("Soap", 10.0, 5)
    product1.getTotalValue()
    product1.addProductToDatabase()
}


// 6.Implement a class called Student with attributes for name, age, and grades (a
// list of integers). Include methods to calculate the average grade, display the
// student information, and determine if the student has passed (average grade >=
// 60). Create objects for the Student class and demonstrate the usage of these
// methods

class Student(var name: String, var age: Int, var grades: List<Int>) {
    fun averageGrade() {
        var total = 0
        for (g in grades) {
            total += g
            println(total)
        }
        val average = total.toDouble() / grades.size
        println(average)
    }
    fun displayInfo() {
        println("This student's name is $name and they are $age years old and they have an average grade of ${averageGrade()}")
    }
    fun passMark() {
        if (averageGrade() >= 60) {
            println("The student has passed")
        } else {
            println("The student has failed")
        }
    }
}
fun main() {
    val john = Student("John", 23, listOf(80, 85, 74, 90))
    john.averageGrade()
    john.displayInfo()
    john.passMark()
}